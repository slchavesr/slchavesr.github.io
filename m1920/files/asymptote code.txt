// The three coordinate axes


import graph3;


size(200,200,IgnoreAspect);
          //currentprojection=perspective(7,2,1);
          currentprojection=orthographic(11,5,2.8);
          defaultrender.merge=true;

          // setup and draw the axes
          real[] myxchoice={-2,-1,1,2};
          real[] myychoice={-2,-1,1,2};
          real[] myzchoice={-2,-1,1,2};
          defaultpen(0.3mm);
          pair xbounds=(-3,3.5);
          pair ybounds=(-2.5,2.5);
          pair zbounds=(-2.5,2.5);

          xaxis3("",xbounds.x,xbounds.y,black,OutTicks(myxchoice),Arrows3(size=3mm));
          yaxis3("",ybounds.x,ybounds.y,blue,OutTicks(myychoice),Arrows3(size=3mm));
          zaxis3("",zbounds.x,zbounds.y,red,OutTicks(myzchoice),Arrows3(size=3mm));

          label("$x$",(xbounds.y+0.05*(xbounds.y-xbounds.x),0,0));
          label("$y$",(0,ybounds.y+0.05*(ybounds.y-ybounds.x),0));
          label("$z$",(0,0,zbounds.y+0.05*(zbounds.y-zbounds.x)));

// The xy-plane

import graph3;
	
			 size(198,198,IgnoreAspect);
              //currentprojection=perspective(7,2,1);
              currentprojection=orthographic(4,4,2);
              defaultrender.merge=true;

              // setup and draw the axes
              real[] myxchoice={};
              real[] myychoice={};
              real[] myzchoice={};
              defaultpen(0.5mm);
              pair xbounds=(-2.5,2.5);
              pair ybounds=(-2.5,2.5);
              pair zbounds=(-2.5,2.5);

              xaxis3("",xbounds.x,xbounds.y,black,OutTicks(myxchoice),Arrow3(size=3mm));
              yaxis3("",ybounds.x,ybounds.y,black,OutTicks(myychoice),Arrow3(size=3mm));
              zaxis3("",zbounds.x,zbounds.y,black,OutTicks(myzchoice),Arrow3(size=3mm));

              label("$x$",(xbounds.y+0.05*(xbounds.y-xbounds.x),0,0));
              label("$y$",(0,ybounds.y+0.05*(ybounds.y-ybounds.x),0));
              label("$z$",(0,0,zbounds.y+0.05*(zbounds.y-zbounds.x)));

              //Draw the xy-plane
              triple f(pair t) {
                return (t.x,t.y,0);
              }
              surface s=surface(f,(-2,-2),(2,2),8,8,Spline);
              draw(s,blue,meshpen=red, nolight,render(merge=true));

//

Parallelpiped

import three;
size(300);
currentprojection = perspective(4,-2,3);

// Define vectors u, v, w
triple u = (2,1,0);
triple v = (1,3,-1);
triple w = (1,2,3);

// Draw the original vectors
draw((0,0,0)--u, red+linewidth(1.5), Arrow3);
label("$\mathbf{u}$", u, S);
draw((0,0,0)--v, blue+linewidth(1.5), Arrow3);
label("$\mathbf{v}$", v, S);
draw((0,0,0)--w, black+linewidth(1.5), Arrow3);
label("$\mathbf{w}$", w, N);

// Draw the parallelepiped edges
draw(u--u+v, green+linewidth(0.8)+dashed);
draw(u--u+w, green+linewidth(0.8)+dashed);
draw(v--v+u, green+linewidth(0.8)+dashed);
draw(v--v+w, green+linewidth(0.8)+dashed);
draw(w--w+u, green+linewidth(0.8)+dashed);
draw(w--w+v, green+linewidth(0.8)+dashed);

// Draw the upper faces of the parallelepiped
draw(u+v--u+v+w, green+linewidth(0.8)+dashed);
draw(u+w--u+v+w, green+linewidth(0.8)+dashed);
draw(v+w--u+v+w, green+linewidth(0.8)+dashed);


